package handlersadmin

import (
	"api-game/model"
	"net/http"

	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

func GetAllUsersHandler(c *gin.Context, db *gorm.DB) {
	var users []model.User

	// --- üëá [‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ---
	// 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° .Where("role = ?", "member") ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	if err := db.Where("role = ?", "member").Order("user_id desc").Find(&users).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Could not fetch users"})
		return
	}
	// --- üëÜ [‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ---

	// 2. ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
	for i := range users {
		users[i].Password = ""
	}

	// 3. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
	c.JSON(http.StatusOK, gin.H{
		"status":  "success",
		"message": "Users fetched successfully",
		"data":    users,
	})
}

// GetUserByIDHandler ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≤‡∏° ID (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)
func GetUserByIDHandler(c *gin.Context, db *gorm.DB) {
	id := c.Param("id")
	var user model.User
	if err := db.First(&user, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "User not found"})
		return
	}
	user.Password = "" // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
	c.JSON(http.StatusOK, gin.H{"status": "success", "data": user})
}

// GetUserOrdersHandler ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)
func GetUserOrdersHandler(c *gin.Context, db *gorm.DB) {
	id := c.Param("id")
	var orders []model.Order

	// --- üëá [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Preload ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ] ---
	// ‡πÉ‡∏ä‡πâ Preload ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OrderDetails ‡πÅ‡∏•‡∏∞ Game ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
	err := db.Preload("OrderDetails").
		// üí° ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: Preload Game ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Unscoped() ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô
		Preload("OrderDetails.Game", func(db *gorm.DB) *gorm.DB {
			return db.Unscoped()
		}).
		Where("user_id = ?", id).
		Order("order_date desc").
		Find(&orders).Error

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Could not fetch user orders"})
		return
	}

	if len(orders) == 0 { // ‡πÉ‡∏ä‡πâ len() ‡∏à‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ nil ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
		orders = []model.Order{}
	}
	c.JSON(http.StatusOK, gin.H{"status": "success", "data": orders})
}

// GetUserWalletHistoryHandler ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)
func GetUserWalletHistoryHandler(c *gin.Context, db *gorm.DB) {
	id := c.Param("id")
	var history []model.WalletHistory
	if err := db.Where("user_id = ?", id).Order("transaction_date desc").Find(&history).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Could not fetch wallet history"})
		return
	}

	if history == nil {
		history = []model.WalletHistory{}
	}
	c.JSON(http.StatusOK, gin.H{"status": "success", "data": history})
}
