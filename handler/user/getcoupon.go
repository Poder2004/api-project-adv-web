// handlers/coupon_handler.go

package handlers

import (
	"api-game/model"
	"errors"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

// ClaimCouponHandler handles a user's request to claim a discount coupon
func ClaimCouponHandler(c *gin.Context, db *gorm.DB) {
	// 1. ‡∏î‡∏∂‡∏á user_id ‡∏à‡∏≤‡∏Å Middleware ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
	userIDAny, exists := c.Get("user_id") // üëà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "User not authenticated"})
		return
	}

	// ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏à‡∏≤‡∏Å interface{} ‡πÄ‡∏õ‡πá‡∏ô float64 (‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ default ‡∏à‡∏≤‡∏Å JWT)
	userIDFloat, ok := userIDAny.(float64)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Invalid user ID type in context"})
		return
	}
	// ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å float64 ‡πÄ‡∏õ‡πá‡∏ô uint ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
	finalUserID := uint(userIDFloat) // üëà ‡πÑ‡∏î‡πâ user_id ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô uint ‡πÅ‡∏•‡πâ‡∏ß

	// 2. ‡∏î‡∏∂‡∏á did (coupon id) ‡∏à‡∏≤‡∏Å URL parameter
	didStr := c.Param("did")
	did, err := strconv.ParseUint(didStr, 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid coupon ID format"})
		return
	}

	// 3. ‡πÉ‡∏ä‡πâ Transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
	err = db.Transaction(func(tx *gorm.DB) error {
		var coupon model.DiscountCode

		// 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏£‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
		if err := tx.Set("gorm:query_option", "FOR UPDATE").First(&coupon, did).Error; err != nil {
			if errors.Is(err, gorm.ErrRecordNotFound) {
				return errors.New("coupon not found")
			}
			return err
		}

		if coupon.UsedCount >= coupon.LimitUsage {
			return errors.New("coupon has reached its usage limit")
		}

		// 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á user_coupons
		userCoupon := model.UserCoupon{
			UserID: finalUserID, // üëà ‡πÉ‡∏ä‡πâ user_id ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß
			DID:    uint(did),
			IsUsed: false,
		}

		if err := tx.Create(&userCoupon).Error; err != nil {
			return errors.New("you have already claimed this coupon")
		}

		// 6. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï used_count ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á discount_code (+1)
		coupon.UsedCount++
		if err := tx.Save(&coupon).Error; err != nil {
			return err
		}

		return nil
	})

	// 7. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Transaction
	if err != nil {
		switch err.Error() {
		case "coupon not found":
			c.JSON(http.StatusNotFound, gin.H{"error": err.Error()})
		case "coupon has reached its usage limit", "you have already claimed this coupon":
			c.JSON(http.StatusConflict, gin.H{"error": err.Error()})
		default:
			c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to claim coupon", "details": err.Error()})
		}
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"status":  "success",
		"message": "Coupon claimed successfully!",
	})

	
}

// GetMyCouponsHandler handles fetching all claimed coupon IDs for the current user
func GetMyCouponsHandler(c *gin.Context, db *gorm.DB) {
	// 1. ‡∏î‡∏∂‡∏á user_id ‡∏à‡∏≤‡∏Å Middleware
	userIDAny, exists := c.Get("user_id")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "User not authenticated"})
		return
	}
	userID := uint(userIDAny.(float64)) // ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

	var claimedCouponIDs []uint

	// 2. ‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á user_coupons ‡πÇ‡∏î‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'did'
	// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user_id ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
	err := db.Model(&model.UserCoupon{}).
		Where("user_id = ?", userID).
		Pluck("did", &claimedCouponIDs).Error

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Could not fetch user's coupons"})
		return
	}
	
	// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á‡πÜ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô null
	if claimedCouponIDs == nil {
		claimedCouponIDs = []uint{}
	}

	// 3. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô JSON
	c.JSON(http.StatusOK, gin.H{
		"status":  "success",
		"message": "User's claimed coupons fetched successfully",
		"data":    claimedCouponIDs,
	})

}

// GetMyAvailableCouponsHandler fetches full coupon details that the user has claimed but not yet used.
func GetMyAvailableCouponsHandler(c *gin.Context, db *gorm.DB) {
	userIDAny, _ := c.Get("user_id")
	userID := uint(userIDAny.(float64))

	var availableCoupons []model.DiscountCode

	// ‡πÉ‡∏ä‡πâ JOIN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á discount_code
	// ‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á user_coupons ‡∏ó‡∏µ‡πà is_used = false
	err := db.Joins("JOIN user_coupons ON user_coupons.did = discount_code.did").
		Where("user_coupons.user_id = ? AND user_coupons.is_used = ?", userID, false).
		Find(&availableCoupons).Error

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Could not fetch available coupons"})
		return
	}

	if availableCoupons == nil {
		availableCoupons = []model.DiscountCode{}
	}

	c.JSON(http.StatusOK, gin.H{
		"status":  "success",
		"message": "User's available coupons fetched successfully",
		"data":    availableCoupons,
	})
}

	

